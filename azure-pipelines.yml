name: $(BuildDefinitionName)_$(SourceBranchName)_$(Date:yy)$(DayOfYear).$(BuildCounter)

parameters:
  - name: ContinueEvenIfResourcesAreGettingDestroyed
    displayName: "Continue even if resources are getting destroyed"
    type: boolean
    default: false

  - name: RunStryker
    displayName: "Run Stryker test mutation"
    type: boolean
    default: true
    
trigger:
  - main
  - release/*

pool: $(WindowsPool) 

variables:
  - name: BuildConfiguration
    value: "release"
  - name: BuildPlatform
    value: "any cpu"
  - name: BuildCounter
    value: $[counter(format('{0:yyyyMMdd}', pipeline.startTime), 1)]
  - name: WindowsPool
    value: "Mare Nubium"
  - name: Container
    value: "ukhydrographicoffice/terraform-azure-powershell-unzip:1.7.2"
  - name: DeploymentPool
    value: "Mare Nectaris"
  - name: DeploymentPoolFT
    value: "Tiberius"
  - name: DeploymentPoolPE
    value: "Private Link Deployments (ENG)"
  - name: DeploymentPoolPD
    value: "Private Link Deployments (BUS)"
  - name: DotNetSdkVersion
    value: "8.x"

resources:
  repositories:
  - repository: UKHOTemplates
    type: github
    name: UKHO/devops-pipelinetemplates
    endpoint: UKHO
    ref: refs/heads/main


stages:
  - stage: RUNSTRKER
    displayName: "run stryker"
    jobs:
      - job: Stryker
        condition: eq('${{ parameters.RunStryker }}', true)      
        workspace:
          clean: all       
        steps:
          - checkout: self
            submodules: true
          - task: UseDotNet@2
            displayName: Use .NET SDK $(DotNetSdkVersion)
            inputs:
              packageType: sdk
              version: $(DotNetSdkVersion)
          - task: DotNetCoreCLI@2
            displayName: "Install Stryker"
            inputs:
              command: custom
              custom: tool
              arguments: install dotnet-stryker --tool-path $(Agent.BuildDirectory)/tools
          - task: DotNetCoreCLI@2
            displayName: ".Net Core - NuGet restore for non test projects only"
            inputs:
              command: "restore"
              projects: |
                **/*.csproj              
              feedsToUse: config
              noCache: true
              nugetConfigPath: '$(Build.SourcesDirectory)\BuildNuget.config'
              workingDirectory: '$(Build.SourcesDirectory)'             
          - task: Powershell@2
            displayName: "Run Stryker"
            inputs:
              workingDirectory: '$(Build.SourcesDirectory)'
              targetType: 'inline'
              pwsh: true
              script: $(Agent.BuildDirectory)/tools/dotnet-stryker
          - task: PublishMutationReport@0
            displayName: 'Publish Strkyer Mutator Report'
            inputs:
              reportPattern: '**/mutation-report.html'          
  
  - stage: BuildTestPublish
    displayName: "Build (Dotnet Build & Restore , Dotnet Test and Publish Artifact )"
    dependsOn: []
    jobs:
      - template: Deployment/templates/build-test-publish.yml

  - stage: DevDeploy
    dependsOn:
    - BuildTestPublish
    displayName: "Dev deploy" 
    variables:
    - template: Deployment/templates/var/dev-deploy.yml   
    jobs:
    - template: Deployment/templates/continuous-deployment-app.yml
      parameters:
        AzureDevOpsEnvironment: "ERP-Dev"
        ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
        AzureSubscription: "ERP-Facade-Dev-A.011.05.12"
        ShortName: "Dev"
        AppPool: $(DeploymentPoolPE)
        Container: ${{variables.Container}}
        DeploySAPMocks: true
        RunFunctionalTests: true 

  - stage: vNextIATDeploy
    dependsOn:
    - DevDeploy
    displayName: "vNextIAT deploy" 
    variables:
    - template: Deployment/templates/var/vnextiat-deploy.yml   
    jobs:
    - template: Deployment/templates/continuous-deployment-app.yml
      parameters:
        AzureDevOpsEnvironment: "ERP-vNextIAT"
        ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
        AzureSubscription: "ERP-Facade-vNext-IAT-A.011.08"
        ShortName: "vNextIAT"
        AppPool: $(DeploymentPoolPE)
        Container: ${{variables.Container}}

  # - stage: E2EDeploy
  #   dependsOn:
  #   - vNextIATDeploy
  #   displayName: "E2e - Deploy Terraform" 
  #   variables:
  #   - template: Deployment/templates/var/vnexte2e-deploy.yml   
  #   jobs:
  #   - template: Deployment/templates/continuous-deployment-app.yml
  #     parameters:
  #       AzureDevOpsEnvironment: "ERP-E2E"
  #       ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
  #       AzureSubscription: "ERP-Facade-E2E-A.011.08"
  #       ShortName: "E2E"
  #       AppPool: $(DeploymentPoolPE)
  #       Container: ${{variables.Container}}          
       

  - stage: IATDeploy
    dependsOn:
    - DevDeploy
    displayName: "IAT deploy" 
    variables:
    - template: Deployment/templates/var/iat-deploy.yml   
    jobs:
    - template: Deployment/templates/continuous-deployment-app.yml
      parameters:
        AzureDevOpsEnvironment: "ERP-IAT"
        ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
        AzureSubscription: "ERP-Facade-IAT-A.011.08"
        ShortName: "IAT"
        AppPool: $(DeploymentPoolPE)
        Container: ${{variables.Container}}
        DeployADDSMocks: true
        RunFunctionalTests: true
  
  - stage: PreProdDeploy
    dependsOn:
    - IATDeploy
    displayName: "PreProd Deploy" 
    variables:
    - template: Deployment/templates/var/prp-deploy.yml   
    jobs:
    - template: Deployment/templates/continuous-deployment-app.yml
      parameters:
        AzureDevOpsEnvironment: "ERP-preprod"
        ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
        AzureSubscription: "ERP-Facade-PRE-A.011.08"
        ShortName: "prp"
        AppPool: $(DeploymentPoolPE)
        Container: ${{variables.Container}}
  
  - stage: QADeploy
    dependsOn:
    - DevDeploy
    displayName: "QA Deploy" 
    variables:
    - template: Deployment/templates/var/qa-deploy.yml   
    jobs:
    - template: Deployment/templates/continuous-deployment-app.yml
      parameters:
        AzureDevOpsEnvironment: "ERP-QA"
        ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
        AzureSubscription: "ERP-Facade-QA-A.011.05.12"
        ShortName: "qa"
        AppPool: $(DeploymentPoolPE)
        Container: ${{variables.Container}} 
  
  - stage: LiveDeploy
    dependsOn:
    - PreProdDeploy
    displayName: "Live Deploy" 
    variables:
    - template: Deployment/templates/var/live-deploy.yml   
    jobs:
    - template: Deployment/templates/continuous-deployment-app.yml
      parameters:
        AzureDevOpsEnvironment: "ERP-Live"
        ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
        AzureSubscription: "ERP-Facade-Live-A.011.05.12"
        ShortName: "Live"
        AppPool: $(DeploymentPoolPD)
        Container: ${{variables.Container}} 
        RetainPipeline: true 
