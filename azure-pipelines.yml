name: $(BuildDefinitionName)_$(SourceBranchName)_$(Date:yy)$(DayOfYear).$(BuildCounter)

parameters:
  - name: ContinueEvenIfResourcesAreGettingDestroyed
    displayName: "Continue even if resources are getting destroyed"
    type: boolean
    default: false

  - name: RunStryker
    displayName: "Run Stryker test mutation"
    type: boolean
    default: true
    
trigger:
  - main
  - release/*

pool: $(WindowsPool) 

variables:
  - name: BuildConfiguration
    value: "release"
  - name: BuildPlatform
    value: "any cpu"
  - name: BuildCounter
    value: $[counter(format('{0:yyyyMMdd}', pipeline.startTime), 1)]
  - name: WindowsPool
    value: "Mare Nubium"
  - name: Container
    value: "ukhydrographicoffice/terraform-azure-powershell-unzip:1.7.2"
  - name: DeploymentPool
    value: "Mare Nectaris"
  - name: DeploymentPoolFT
    value: "Tiberius"
  - name: DeploymentPoolPE
    value: "Private Link Deployments (ENG)"
  - name: DeploymentPoolPD
    value: "Private Link Deployments (BUS)"
  - name: DotNetSdkVersion
    value: "8.x"

resources:
  repositories:
  - repository: UKHOTemplates
    type: github
    name: UKHO/devops-pipelinetemplates
    endpoint: UKHO
    ref: refs/heads/main


stages:
  - stage: RUNSTRKER
    displayName: "run stryker"
    jobs:
      - job: Stryker
        condition: eq('${{ parameters.RunStryker }}', true)      
        workspace:
          clean: all       
        steps:
          - checkout: self
            submodules: true
          - task: UseDotNet@2
            displayName: Use .NET SDK $(DotNetSdkVersion)
            inputs:
              packageType: sdk
              version: $(DotNetSdkVersion)
          - task: DotNetCoreCLI@2
            displayName: "Install Stryker"
            inputs:
              command: custom
              custom: tool
              arguments: install dotnet-stryker --tool-path $(Agent.BuildDirectory)/tools
          - task: DotNetCoreCLI@2
            displayName: ".Net Core - NuGet restore for non test projects only"
            inputs:
              command: "restore"
              projects: |
                **/*.csproj              
              feedsToUse: config
              noCache: true
              nugetConfigPath: '$(Build.SourcesDirectory)\BuildNuget.config'
              workingDirectory: '$(Build.SourcesDirectory)'             
          - task: Powershell@2
            displayName: "Run Stryker"
            inputs:
              workingDirectory: '$(Build.SourcesDirectory)'
              targetType: 'inline'
              pwsh: true
              script: $(Agent.BuildDirectory)/tools/dotnet-stryker
          - task: PublishMutationReport@0
            displayName: 'Publish Strkyer Mutator Report'
            inputs:
              reportPattern: '**/mutation-report.html'          
  
  - stage: BuildTestPublish
    displayName: "Build (Dotnet Build & Restore , Dotnet Test and Publish Artifact )"
    dependsOn: []
    jobs:
      - template: Deployment/templates/build-test-publish.yml

  - stage: DevDeploy
    dependsOn:
    - BuildTestPublish
    displayName: "Dev deploy"    
    jobs:
    - template: Deployment/templates/continuous-deployment-app.yml
      parameters:
        AzureDevOpsEnvironment: "ERP-Dev"
        ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
        AzureSubscription: "ERP-Facade-Dev-A.011.05.12"
        ShortName: "Dev"
        AppPool: $(DeploymentPoolPE)
        Container: ${{variables.Container}}
        DeploySAPMocks: true
        RunFunctionalTests: true      
       
      
      # - job: DevContinuousDeploy            
      #   dependsOn: DevDeployTerraform
      #   displayName: "Dev - Deploy Dotnet App"
      #   pool: $(DeploymentPoolPE)   
      #   workspace:
      #     clean: all
      #   strategy:
      #     runOnce:
      #       deploy:          
      #         steps:
      #         - template: Deployment/templates/continuous-deployment-app.yml
      #           parameters:
      #             AzureSubscription: "ERP-Facade-Dev-A.011.05.12"
      #             ShortName: "Dev"
      #             AppPool: $(DeploymentPoolPE)

      # - job: FunctionalTests
      #   dependsOn:
      #   - DevContinuousDeploy        
      #   pool: $(DeploymentPoolPE)
      #   variables:
      #     - name : ErpFacadeConfiguration.BaseUrl
      #       value : $[ dependencies.DevDeployTerraform.outputs['DevDeployTerraform.TerraformDeploy.ErpFacadeBaseUrl'] ]
      #     - name : SapMockConfiguration.BaseUrl
      #       value : $[ dependencies.DevDeployTerraform.outputs['DevDeployTerraform.TerraformDeploy.mockwebappurl'] ]
      #     - name : AzureStorageConfiguration.ConnectionString
      #       value : $[ dependencies.DevDeployTerraform.outputs['DevDeployTerraform.TerraformDeploy.AzureStorageConnectionString'] ]
      #     - name : mockWebAppName
      #       value : $[ dependencies.DevDeployTerraform.outputs['DevDeployTerraform.TerraformDeploy.mockWebApp'] ]
      #     - name : mockWebAppResourceGroup
      #       value : $[ dependencies.DevDeployTerraform.outputs['DevDeployTerraform.TerraformDeploy.mockWebAppResourceGroupName'] ]
      #   displayName: "Dev Functional Automated Tests"
      #   workspace:
      #    clean: all
      #   steps:
      #     - template: Deployment/templates/continuous-testing.yml
      #       parameters:
      #         AzureSubscription: "ERP-Facade-Dev-A.011.05.12"              

  # - stage: vNextIATDeploy
  #   dependsOn:  DevDeploy
  #   displayName: "VNext IATdeploy (inc terraform, webapp deploy)"
  #   condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/develop'), startsWith(variables['Build.SourceBranch'], 'refs/heads/dev/')))
  #   variables:
  #   - template: Deployment/templates/var/vnextiat-deploy.yml
  #   - template: Deployment/templates/var/vnextiat-deploy.yml
  #     parameters:
  #         ShortName: "vNextIAT"
  #   jobs:
  #     - deployment: vNextIATDeployTerraform
  #       displayName: "vNextIAT - Deploy Terraform"
  #       environment: "ERP-vNextIAT"
  #       pool: $(DeploymentPool)
  #       container: ${{variables.Container}}
  #       workspace:
  #         clean: all
  #       strategy:
  #         runOnce:
  #           deploy:
  #             steps:
  #               - template: Deployment/templates/continuous-deployment.yml
  #                 parameters:
  #                   ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
  #                   AzureSubscription: "ERP-Facade-vNext-IAT-A.011.08"

  #     - job: vNextIATContinuousDeploy    
  #       dependsOn: vNextIATDeployTerraform
  #       displayName: "vNextIAT - Deploy Dotnet App"           
  #       pool: $(DeploymentPoolPE)   
  #       workspace:
  #         clean: all
  #       strategy:
  #         runOnce:
  #           deploy:
  #       steps:
  #         - template: Deployment/templates/continuous-deployment-app.yml
  #           parameters:
  #             AzureSubscription: "ERP-Facade-vNext-IAT-A.011.08"
  #             ShortName: "vNextIAT"
  #             AppPool: $(DeploymentPoolPE)
   
  # - stage: E2EDeploy
  #   dependsOn: vNextIATDeploy
  #   displayName: "E2Edeploy (inc terraform, webapp deploy)"
  #   variables:
  #   - template: Deployment/templates/var/vnexte2e-deploy.yml
  #   - template: Deployment/templates/var/vnextiat-deploy.yml
  #     parameters:
  #         ShortName: "E2E"
  #   condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/develop'), startsWith(variables['Build.SourceBranch'], 'refs/heads/dev/')))

  #   jobs:
  #     - deployment: E2EDeployTerraform
  #       displayName: "E2e - Deploy Terraform"
  #       environment: "ERP-E2E"
  #       pool: $(DeploymentPool)
  #       container: ${{variables.Container}}
  #       workspace:
  #         clean: all
  #       strategy:
  #         runOnce:
  #           deploy:
  #             steps:
  #               - template: Deployment/templates/continuous-deployment.yml
  #                 parameters:
  #                   ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
  #                   AzureSubscription: "ERP-Facade-E2E-A.011.08"

  #     - job: E2EContinuousDeploy       
  #       dependsOn: E2EDeployTerraform
  #       displayName: "E2e - Deploy Dotnet App"             
  #       pool: $(DeploymentPoolPE)   
  #       workspace:
  #         clean: all
  #       strategy:
  #         runOnce:
  #           deploy:
  #       steps:
  #         - template: Deployment/templates/continuous-deployment-app.yml
  #           parameters:
  #             AzureSubscription: "ERP-Facade-vNext-E2E-A.011.08"
  #             ShortName: "E2E"
  #             AppPool: $(DeploymentPoolPE)            

  # - stage: IATDeploy
  #   dependsOn: DevDeploy   
  #   displayName: "IATdeploy (inc terraform, webapp deploy)"  
  #   condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'),startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')))    
  #   variables:
  #   - template: Deployment/templates/var/iat-deploy.yml
   
  #   jobs:
  #     - deployment: IATDeployTerraform
  #       displayName: "IAT - Deploy Terraform"
  #       environment: "ERP-IAT"
  #       pool: $(DeploymentPool)
  #       container: ${{variables.Container}}
  #       workspace:
  #         clean: all
  #       strategy:
  #         runOnce:
  #           deploy:
  #             steps:
  #               - template: Deployment/templates/continuous-deployment.yml
  #                 parameters:
  #                   ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
  #                   AzureSubscription: "ERP-Facade-IAT-A.011.08"

  #     - job: IATContinuousDeploy                
  #       dependsOn: IATDeployTerraform
  #       displayName: "IAT - Deploy Dotnet App"
  #       pool: $(DeploymentPoolPE)   
  #       workspace:
  #         clean: all
  #       strategy:
  #         runOnce:
  #           deploy:
  #       steps:
  #         - template: Deployment/templates/continuous-deployment-app.yml
  #           parameters:
  #             AzureSubscription: "ERP-Facade-IAT-A.011.08"
  #             ShortName: "IAT"
  #             AppPool: $(DeploymentPoolPE)

  #     - job: FunctionalTests
  #       dependsOn:
  #       - IATContinuousDeploy            
  #       pool: $(DeploymentPoolPE)
  #       variables:
  #         - name : ErpFacadeConfiguration.BaseUrl
  #           value : $[ dependencies.IATDeployTerraform.outputs['IATDeployTerraform.TerraformDeploy.ErpFacadeBaseUrl'] ]
  #         - name : SapMockConfiguration.BaseUrl
  #           value : $[ dependencies.IATDeployTerraform.outputs['IATDeployTerraform.TerraformDeploy.mockwebappurl'] ]
  #         - name : AzureStorageConfiguration.ConnectionString
  #           value : $[ dependencies.IATDeployTerraform.outputs['IATDeployTerraform.TerraformDeploy.AzureStorageConnectionString'] ]
  #         - name : mockWebAppName
  #           value : $[ dependencies.IATDeployTerraform.outputs['IATDeployTerraform.TerraformDeploy.mockWebApp'] ]
  #         - name : mockWebAppResourceGroup
  #           value : $[ dependencies.IATDeployTerraform.outputs['IATDeployTerraform.TerraformDeploy.mockWebAppResourceGroupName'] ]
  #       displayName: "Dev Functional Automated Tests"
  #       workspace:
  #        clean: all
  #       steps:
  #         - template: Deployment/templates/continuous-testing.yml
  #           parameters:
  #             AzureSubscription: "ERP-Facade-IAT-A.011.05.12"              
 
  # - stage: PreProdDeploy
  #   dependsOn: DevDeploy  
  #   displayName: "PreProddeploy (inc terraform, webapp deploy)"  
  #   condition: succeeded()
  #   variables:
  #   - template: Deployment/templates/var/prp-deploy.yml
  #   - template: Deployment/templates/var/vnextiat-deploy.yml
  #     parameters:
  #         ShortName: "PreProd"
  #   jobs:
  #     - deployment: PreProdDeployTerraform
  #       displayName: "PreProd - Deploy Terraform"
  #       environment: "ERP-preprod"
  #       pool: $(DeploymentPool)
  #       container: ${{variables.Container}}
  #       workspace:
  #         clean: all
  #       strategy:
  #         runOnce:
  #           deploy:
  #             steps:
  #               - template: Deployment/templates/continuous-deployment.yml
  #                 parameters:
  #                   ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
  #                   AzureSubscription: "ERP-Facade-PRE-A.011.08"

  #     - job: PreProdContinuousDeploy    
  #       dependsOn: PreProdDeployTerraform
  #       displayName: "PRP - Deploy Dotnet App"
  #       pool: $(DeploymentPoolPE)   
  #       workspace:
  #         clean: all
  #       strategy:
  #         runOnce:
  #           deploy:
  #       steps:
  #         - template: Deployment/templates/continuous-deployment-app.yml
  #           parameters:
  #             AzureSubscription: "ERP-Facade-PRE-A.011.08"
  #             ShortName: "PreProd"
  #             AppPool: $(DeploymentPoolPE)
 
  # - stage: QADeploy
  #   dependsOn: DevDeploy
  #   displayName: "QAdeploy (inc terraform, webapp deploy)"
  #   variables:
  #   - template: Deployment/templates/var/qa-deploy.yml
  #   - template: Deployment/templates/var/vnextiat-deploy.yml
  #     parameters:
  #         ShortName: "QA"
  #   condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'),startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')))

  #   jobs:
  #     - deployment: QADeployTerraform
  #       displayName: "Qa - Deploy Terraform"
  #       environment: "ERP-QA"
  #       pool: $(DeploymentPool)
  #       container: ${{variables.Container}}
  #       workspace:
  #         clean: all
  #       strategy:
  #         runOnce:
  #           deploy:
  #             steps:
  #               - template: Deployment/templates/continuous-deployment.yml
  #                 parameters:
  #                   ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
  #                   AzureSubscription: "ERP-Facade-QA-A.011.05.12"
  #     - job: QAContinuousDeploy 
  #       dependsOn: QADeployTerraform
  #       displayName: "Qa - Deploy Dotnet App"
  #       pool: $(DeploymentPoolPE)   
  #       workspace:
  #         clean: all
  #       strategy:
  #         runOnce:
  #           deploy:
  #       steps:
  #         - template: Deployment/templates/continuous-deployment-app.yml
  #           parameters:
  #             AzureSubscription: "ERP-Facade-QA-A.011.05.12"
  #             ShortName: "QA"
  #             AppPool: $(DeploymentPoolPE)
      
  # - stage: LiveDeploy
  #   dependsOn: PreProdDeploy
  #   displayName: "Livedeploy (inc terraform, webapp deploy)"
  #   variables:
  #   - template: Deployment/templates/var/live-deploy.yml
  #   - template: Deployment/templates/var/vnextiat-deploy.yml
  #     parameters:
  #         ShortName: "Live"
  #   condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'),startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')))
  #   jobs:
  #     - deployment: LiveDeployTerraform
  #       displayName: "Live - Deploy Terraform"
  #       environment: "ERP-Live"
  #       pool: $(DeploymentPool)
  #       container: ${{variables.Container}}
  #       workspace:
  #         clean: all
  #       strategy:
  #         runOnce:
  #           deploy:
  #             steps:
  #               - template: Deployment/templates/continuous-deployment.yml
  #                 parameters:
  #                   ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
  #                   AzureSubscription: "ERP-Facade-Live-A.011.05.12"
  #     - job: LiveContinuousDeploy             
  #       dependsOn: LiveDeployTerraform
  #       displayName: "Live - Deploy Dotnet App"
  #       pool: $(DeploymentPoolPE)   
  #       workspace:
  #         clean: all
  #       strategy:
  #         runOnce:
  #           deploy:
  #       steps:
  #         - template: Deployment/templates/continuous-deployment-app.yml
  #           parameters:
  #             AzureSubscription: "ERP-Facade-Live-A.011.05.12"
  #             ShortName: "Live"
  #             AppPool: $(DeploymentPoolPD)

  #     - job: PostDeploymentActions
  #       dependsOn:
  #       - LiveContinuousDeploy                 
  #       pool: $(WindowsPool)        
  #       displayName: Post Deployment Actions
  #       steps:
  #         - template: Deployment/templates/retain-pipeline.yml
