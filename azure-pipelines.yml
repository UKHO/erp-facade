name: $(BuildDefinitionName)_$(SourceBranchName)_$(Date:yy)$(DayOfYear).$(BuildCounter)

parameters:
  - name: ContinueEvenIfResourcesAreGettingDestroyed
    displayName: "Continue even if resources are getting destroyed"
    type: boolean
    default: false

trigger:
  - main
  - release/*

pool: $(WindowsPool) 

variables:
  - name: BuildConfiguration
    value: "release"
  - name: BuildPlatform
    value: "any cpu"
  - name: BuildCounter
    value: $[counter(format('{0:yyyyMMdd}', pipeline.startTime), 1)]
  - name: WindowsPool
    value: "NautilusBuild"
  - name: Container
    value: "ukhydrographicoffice/terraform-azure-powershell-unzip:1.4.4"
  - name: DeploymentPool
    value: "UKHO Ubuntu 1804"

stages:
  - stage: Stryker_Mutator
    displayName: "Stryker Mutator"
    dependsOn: []
    jobs:
      - job: Stryker
        workspace:
          clean: all
        steps:
          - task: UseDotNet@2
            displayName: 'Use .NET 6.0.x sdk'
            inputs:
              packageType: sdk
              useGlobalJson: true
              workingDirectory: '$(Build.SourcesDirectory)'
          - task: DotNetCoreCLI@2
            displayName: "Install Stryker"
            inputs:
              command: custom
              custom: tool
              arguments: install dotnet-stryker --tool-path $(Agent.BuildDirectory)/tools
          - task: Powershell@2
            displayName: "Run Stryker"
            inputs:
              workingDirectory: '$(Build.SourcesDirectory)'
              targetType: 'inline'
              pwsh: true
              script: $(Agent.BuildDirectory)/tools/dotnet-stryker
          - task: PublishMutationReport@0
            displayName: 'Publish Strkyer Mutator Report'
            inputs:
              reportPattern: '**/mutation-report.html'

  - stage: PERFORM_DEPENDENCYCHECK_DOTNETBUILD_DOTNETTEST_AND_PUBLISH
    displayName: "Build (DependencyChecker, Dotnet Build & Restore , Dotnet Test and Publish Artifact )"
    dependsOn: []
    jobs:
      #- job: Dependencychecker
      #  workspace:
      #    clean: all
      #  displayName: "Dependencychecker"
      #  steps:
      #    - task: UseDotNet@2
      #      displayName: 'Use .NET 6.0.x sdk'
      #      inputs:
      #        packageType: sdk
      #        useGlobalJson: true
      #        workingDirectory: '$(Build.SourcesDirectory)\src'

      #    - task: DotNetCoreCLI@2
      #      displayName: ".Net Core - NuGet restore non test projects only"
      #      inputs:
      #        command: "restore"
      #        projects: |
      #          **/*.csproj
      #          !**/*Tests.csproj
      #        feedsToUse: config
      #        noCache: true
      #        nugetConfigPath: '$(Build.SourcesDirectory)\BuildNuget.config'
      #        workingDirectory: '$(Build.SourcesDirectory)\src'
      #        packagesDirectory: '$(Build.SourcesDirectory)\src\packagesForAPI'

      #    - task: CmdLine@1
      #      displayName: "Run OWASP Dependency Checker"
      #      inputs:
      #        filename: 'dependency-check.bat'
      #        arguments: '--project "erp-facade - $(Build.SourceBranchName)" --scan "$(Build.SourcesDirectory)\src" --out "$(Build.ArtifactStagingDirectory)\DCReport" --suppression $(Build.SourcesDirectory)\NVDSuppressions.xml --noupdate'

      #    - task: PublishBuildArtifacts@1
      #      displayName: "Publish Artifact: OWASP Dependency Checker Report"
      #      inputs:
      #        PathtoPublish: '$(Build.ArtifactStagingDirectory)\DCReport'
      #        ArtifactName: "OWASP Dependency Checker Report"

      #    - task: PowerShell@1
      #      displayName: "Fail Build if Dependency Check Finds Any Vulnerabilities"
      #      inputs:
      #        scriptType: inlineScript
      #        arguments: '-ReportLocation $(Build.ArtifactStagingDirectory)\DCReport\*'
      #        inlineScript: |
      #          param($ReportLocation)
      #          Invoke-VulnerabilityCheck -ReportLocation $ReportLocation

      #- job: UnitTestsAndCodeCoverage
      #  workspace:
      #    clean: all
      #  displayName: "Dotnet Test and Publish Code Coverage"
      #  steps:
      #    - task: UseDotNet@2
      #      displayName: 'Use .NET 6.0.x sdk'
      #      inputs:
      #        packagetype: sdk
      #        useglobaljson: true
      #        workingdirectory: '$(build.sourcesdirectory)\src'

      #    - task: DotNetCoreCLI@2
      #      displayName: ".Net Core - NuGet restore test projects only"
      #      inputs:
      #        command: "restore"
      #        projects: "**/*Tests.csproj"
      #        feedsToUse: config
      #        noCache: true
      #        nugetConfigPath: '$(Build.SourcesDirectory)\BuildNuget.config'
      #        workingDirectory: '$(Build.SourcesDirectory)'
      #        packagesDirectory: '$(Build.SourcesDirectory)\packagesForTests'

      #    - task: DotNetCoreCLI@2
      #      displayName: "dotnet test - Perform Unit Tests"
      #      inputs:
      #        command: "test"
      #        projects: "**/*UnitTests.csproj"
      #        arguments: '--configuration $(BuildConfiguration) --settings "$(Build.SourcesDirectory)\test.runsettings" /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura'
      #        publishTestResults: true
      #        testRunTitle: "UnitTests"

      #    - task: PowerShell@2
      #      displayName: "Generate code coverage report"
      #      inputs:
      #        targetType: filePath
      #        filePath: '$(Build.SourcesDirectory)\CodeCoverageReport.ps1'
      #        arguments: '-source "$(Build.SourcesDirectory)" -reportFolder "$(Build.ArtifactStagingDirectory)"'

      #    - task: PublishBuildArtifacts@1
      #      displayName: "Publish Code coverage"
      #      inputs:
      #        PathtoPublish: "$(Build.ArtifactStagingDirectory)/codecoveragereport"
      #        ArtifactName: codecoveragereport
      - job: BuildAndPublishAPI
        workspace:
          clean: all
        displayName: "Dotnet Build publish ERP Facade API"
        steps:

          - task: UseDotNet@2
            displayName: 'Use .NET 6.0.x sdk'
            inputs:
              packageType: sdk
              useGlobalJson: true
              workingDirectory: '$(Build.SourcesDirectory)\src'
              
          - task: DotNetCoreCLI@2
            displayName: ".Net Core - NuGet restore for non test projects only"
            inputs:
              command: "restore"
              projects: |
                **/*.csproj
                !**/UKHO.SAP.MockService.csproj
              feedsToUse: config
              noCache: true
              nugetConfigPath: '$(Build.SourcesDirectory)\BuildNuget.config'
              workingDirectory: '$(Build.SourcesDirectory)\src'
              packagesDirectory: '$(Build.SourcesDirectory)\src\packages'

          - task: DotNetCoreCLI@2
            displayName: "dotnet build task"
            inputs:
              command: "build"
              projects: |
                **/*.csproj
                !**/UKHO.SAP.MockService.csproj
              arguments: '--configuration $(BuildConfiguration)'

          - task: DotNetCoreCLI@2
            displayName: "Publish ERP Facade API "
            inputs:
              command: "publish"
              publishWebProjects: false
              projects: '**/*UKHO.ERPFacade.API.csproj'
              arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)\UKHO.ERPFacade.API'
              zipAfterPublish: false
              modifyOutputPath: false

          - task: DotNetCoreCLI@2
            displayName: "Publish ERPFacadeWebjob Code"
            inputs:
              command: "publish"
              publishWebProjects: false
              projects: "**/UKHO.ERPFacade.WebJob.csproj"
              arguments: "--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)/UKHO.ERPFacade.API/App_Data/jobs/continuous/ERPFacadeWebjob"
              zipAfterPublish: false
              modifyOutputPath: false

          - task: ArchiveFiles@2
            displayName: "Zip ERP Service binaries for Webjob"
            inputs:
              rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/UKHO.ERPFacade.API/'
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: '$(Build.ArtifactStagingDirectory)/UKHO.ERPFacade.API/UKHOERPFacadeAPI.zip'
              replaceExistingArchive: true

          - task: PublishBuildArtifacts@1
            displayName: "Publish Web Artifact"
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)\UKHO.ERPFacade.API\UKHOERPFacadeAPI.zip'
              ArtifactName: UKHOERPFacadeAPI

      - job: PublishFunctionalTestsAndTerraform
        workspace:
          clean: all
        displayName: "Publish FunctionalTests and Terraform Artifact"
        steps:

          - task: UseDotNet@2
            displayName: 'Use .NET 6.0.x sdk'
            inputs:
              packageType: sdk
              useGlobalJson: true
              workingDirectory: '$(Build.SourcesDirectory)\src'
              
          - task: DotNetCoreCLI@2
            displayName: ".Net Core - NuGet restore for non test projects only"
            inputs:
              command: "restore"
              projects: |
                **/*.csproj
                !**/UKHO.SAP.MockService.csproj
              feedsToUse: config
              noCache: true
              nugetConfigPath: '$(Build.SourcesDirectory)\BuildNuget.config'
              workingDirectory: '$(Build.SourcesDirectory)\src'
              packagesDirectory: '$(Build.SourcesDirectory)\src\packages'

          - task: DotNetCoreCLI@2
            displayName: "Publish Functional Test Code "
            inputs:
              command: "publish"
              publishWebProjects: false
              projects: '$(Build.SourcesDirectory)\tests\UKHO.ERPFacade.API.FunctionalTests\UKHO.ERPFacade.API.FunctionalTests.csproj'
              arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)\UKHO.ERPFacade.API.FunctionalTests'
              workingDirectory: '$(Build.SourcesDirectory)\tests\UKHO.ERPFacade.API.FunctionalTests'
              zipAfterPublish: false
              modifyOutputPath: true

          - task: PublishBuildArtifacts@1
            displayName: "Publish Functional test Artifact"
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)\UKHO.ERPFacade.API.FunctionalTests'
              ArtifactName: functionaltests

          - task: PublishBuildArtifacts@1
            displayName: "Publish terraform Artifacts"
            inputs:
              PathtoPublish: '$(Build.SourcesDirectory)\Deployment'
              ArtifactName: terraformartifact

      - job: BuildAndPublishMockService
        workspace:
          clean: all
        displayName: "Dotnet Build And Publish Mock Service"
        steps:

          - task: UseDotNet@2
            displayName: 'Use .NET 6.0.x sdk'
            inputs:
              packageType: sdk
              useGlobalJson: true
              workingDirectory: '$(Build.SourcesDirectory)\src'
              
          - task: DotNetCoreCLI@2
            displayName: ".Net Core - NuGet restore for mock project"
            inputs:
              command: "restore"
              projects: |
                **/UKHO.SAP.MockAPIService.csproj
              feedsToUse: config
              noCache: true
              nugetConfigPath: '$(Build.SourcesDirectory)\BuildNuget.config'
              workingDirectory: '$(Build.SourcesDirectory)\UKHO.SAP.MockSAPService'
              packagesDirectory: '$(Build.SourcesDirectory)\UKHO.SAP.MockSAPService\packages'

          - task: DotNetCoreCLI@2
            displayName: "Build Mock Service Project"
            inputs:
              command: "build"
              projects: |
                **/UKHO.SAP.MockAPIService.csproj
              arguments: '--configuration $(BuildConfiguration)'

          - task: DotNetCoreCLI@2
            displayName: "Publish Mock Service"
            inputs:
              command: "publish"
              publishWebProjects: false
              projects: '**/UKHO.SAP.MockAPIService.csproj'
              arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)\MockSAPService'
              zipAfterPublish: true
              modifyOutputPath: true

          - task: PublishBuildArtifacts@1
            displayName: "Publish Mock Service Artifact"
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)\MockSAPService'
              ArtifactName: UKHOMockSAPService

  #- stage: Devdeploy
  #  displayName: "Devdeploy (inc terraform, webapp deploy)"
  #  variables:
  #    - group: "ERP-Facade-Dev"
  #    - group: "Erp-Dev"
  #    - group: "ERP-FACADE-DEV-KV"
  #    - name: "AzureADConfiguration.TenantId"
  #      value: $(AzureADConfigurationTenantId)
  #    - name: "AzureADConfiguration.ClientId"
  #      value: $(AzureADConfigurationClientId)
  #    - name: "AzureADConfiguration.AutoTestClientId"
  #      value: $(AzureADConfigurationAutoTestClientId)
  #    - name: "AzureADConfiguration.ClientSecret"
  #      value: $(AzureADConfigurationClientSecret)
  #    - name: "AzureADConfiguration.AutoTestClientIdNoRole"
  #      value: $(AzureADConfigurationAutoTestClientIdNoRole)
  #    - name: "AzureADConfiguration.ClientSecretNoRole"
  #      value: $(AzureADConfigurationClientSecretNoRole)
  #  jobs:
  #    - deployment: DevDeployTerraform
  #      displayName: "Dev - Deploy Terraform and Dotnet App"
  #      environment: "ERP-Dev"
  #      pool: $(DeploymentPool)
  #      container: ${{variables.Container}}
  #      workspace:
  #        clean: all
  #      strategy:
  #        runOnce:
  #          deploy:
  #            steps:
  #              - template: Deployment/templates/continuous-deployment.yml
  #                parameters:
  #                  ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
  #                  AzureSubscription: "ERP-Facade-Dev-A.011.05.12"

  #              - task: DownloadBuildArtifacts@0
  #                displayName: "Download Functional test Artifact"
  #                inputs:
  #                  buildType: 'current'
  #                  downloadType: 'single'
  #                  artifactName: 'functionaltests'
  #                  downloadPath: '$(Build.SourcesDirectory)'

  #              - task: FileTransform@2
  #                displayName: "File Transform: functionaltests"
  #                inputs:
  #                  folderPath: '$(Build.SourcesDirectory)/functionaltests/'
  #                  xmlTransformationRules:
  #                  jsonTargetFiles: '**/appsettings.json'

  #              - task: UseDotNet@2
  #                displayName: 'Use .NET 6.0.x sdk'
  #                inputs:
  #                  packageType: sdk
  #                  version: 6.0.x

  #              - task: DotNetCoreCLI@2
  #                displayName: "Run Functional tests"
  #                inputs:
  #                  command: "test"
  #                  projects: |
  #                    **/*FunctionalTest*.dll
  #                    !**/*TestAdapter.dll
  #                    !**/obj/**
  #                  testRunTitle: "Dev-AutomationTests"
  #                  workingDirectory: '$(Build.SourcesDirectory)/functionaltests'

  #              - task: AzureCLI@2
  #                displayName: "Set FT Configuration Application Settings for Mock Webapp"
  #                condition: always()
  #                inputs:
  #                  azureSubscription: "ERP-Facade-Dev-A.011.05.12"
  #                  scriptType: 'pscore'
  #                  scriptLocation: 'scriptPath'
  #                  scriptPath: "$(Pipeline.Workspace)/terraformartifact/set_mock_configuration.ps1"
  #                  arguments: '-ftrunning "true" -mockresourcegroup $(ResourceGroup) -mockwebappname $(MOCK_WEB_APP_NAME)'

  - stage: QAdeploy
    displayName: "QAdeploy (inc terraform, webapp deploy)"
    variables:
      - group: "ERP-Facade-QA"
      - group: "Erp-QA"
      - group: "ERP-FACADE-QA-KV"
      - name: "AzureADConfiguration.TenantId"
        value: $(AzureADConfigurationTenantId)
      - name: "AzureADConfiguration.ClientId"
        value: $(AzureADConfigurationClientId)
      - name: "AzureADConfiguration.AutoTestClientId"
        value: $(AzureADConfigurationAutoTestClientId)
      - name: "AzureADConfiguration.ClientSecret"
        value: $(AzureADConfigurationClientSecret)
      - name: "AzureADConfiguration.AutoTestClientIdNoRole"
        value: $(AzureADConfigurationAutoTestClientIdNoRole)
      - name: "AzureADConfiguration.ClientSecretNoRole"
        value: $(AzureADConfigurationClientSecretNoRole)
      #- name: mockWebAppName
      #  value: $[ stageDependencies.Devdeploy.DevDeployTerraform.outputs['DevDeployTerraform.TerraformDeploy.mockWebApp']  ]
      #- name: mockWebAppResourceGroup
      #  value: $[ stageDependencies.Devdeploy.DevDeployTerraform.outputs['DevDeployTerraform.TerraformDeploy.mockWebAppResourceGroupName']  ]
      #- name: SapMockConfiguration.BaseUrl
      #  value: $[ stageDependencies.Devdeploy.DevDeployTerraform.outputs['DevDeployTerraform.TerraformDeploy.SapMockConfiguration.BaseUrlQA']  ]
#    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'),startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')))    
    jobs:
      - deployment: QADeployTerraform
        displayName: "QA - Deploy Terraform and Dotnet App"
        environment: "ERP-QA"
        pool: $(DeploymentPool)
        container: ${{variables.Container}}
        workspace:
          clean: all
        strategy:
          runOnce:
            deploy:
              steps:
                - template: Deployment/templates/continuous-deployment.yml
                  parameters:
                    ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
                    AzureSubscription: "ERP-Facade-QA-A.011.05.12"

                - task: AzureCLI@2
                  displayName: "Set FT Configuration Application Settings for Mock Webapp"
                  condition: always()
                  inputs:
                    azureSubscription: "ERP-Facade-Dev-A.011.05.12"
                    scriptType: 'pscore'
                    scriptLocation: 'scriptPath'
                    scriptPath: "$(Pipeline.Workspace)/terraformartifact/set_mock_configuration.ps1"
                    arguments: '-ftrunning "true" -mockresourcegroup $(mockWebAppResourceGroup) -mockwebappname $(mockWebAppName)'

                - task: DownloadBuildArtifacts@0
                  displayName: "Download Functional test Artifact"
                  inputs:
                    buildType: 'current'
                    downloadType: 'single'
                    artifactName: 'functionaltests'
                    downloadPath: '$(Build.SourcesDirectory)'

                - task: FileTransform@2
                  displayName: "File Transform: functionaltests"
                  inputs:
                    folderPath: '$(Build.SourcesDirectory)/functionaltests/'
                    xmlTransformationRules:
                    jsonTargetFiles: '**/appsettings.json'

                - task: UseDotNet@2
                  displayName: 'Use .NET 6.0.x sdk'
                  inputs:
                    packageType: sdk
                    version: 6.0.x

                - task: DotNetCoreCLI@2
                  displayName: "Run Functional tests"
                  inputs:
                    command: "test"
                    projects: |
                      **/*FunctionalTest*.dll
                      !**/*TestAdapter.dll
                      !**/obj/**
                    testRunTitle: "QA-AutomationTests"
                    workingDirectory: '$(Build.SourcesDirectory)/functionaltests'

                - task: AzureCLI@2
                  displayName: "Set FT Configuration Application Settings for Mock Webapp"
                  condition: always()
                  inputs:
                    azureSubscription: "ERP-Facade-Dev-A.011.05.12"
                    scriptType: 'pscore'
                    scriptLocation: 'scriptPath'
                    scriptPath: "$(Pipeline.Workspace)/terraformartifact/set_mock_configuration.ps1"
                    arguments: '-ftrunning "false" -mockresourcegroup $(mockWebAppResourceGroup) -mockwebappname $(mockWebAppName)'

  - stage: Livedeploy
    displayName: "Livedeploy (inc terraform, webapp deploy)"
    variables:
      - group: "ERP-Facade-Live"
      - group: "Erp-Live"
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'),startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')))
    jobs:
      - deployment: LiveDeployTerraform
        displayName: "Live - Deploy Terraform and Dotnet App"
        environment: "ERP-Live"
        pool: $(DeploymentPool)
        container: ${{variables.Container}}
        workspace:
          clean: all
        strategy:
          runOnce:
            deploy:
              steps:
                - template: Deployment/templates/continuous-deployment.yml
                  parameters:
                    ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
                    AzureSubscription: "ERP-Facade-Live-A.011.05.12"