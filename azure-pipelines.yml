name: $(BuildDefinitionName)_$(SourceBranchName)_$(Date:yy)$(DayOfYear).$(BuildCounter)

parameters:
  - name: ContinueEvenIfResourcesAreGettingDestroyed
    displayName: "Continue even if resources are getting destroyed"
    type: boolean
    default: false

  - name: RunStryker
    displayName: "Run Stryker test mutation"
    type: boolean
    default: true
  - name: SnykOnlyFailIfFixable
    displayName: "Snyk - fail only if an issue has an available fix"
    type: boolean
    default: false
  - name: SnykPassOnIssues
    displayName: "Snyk - don't fail if issues found"
    type: boolean
    default: false
    
trigger:
  - main
  - release/*

pool: $(WindowsPool) 

variables:
  - name: BuildConfiguration
    value: "release"
  - name: BuildPlatform
    value: "any cpu"
  - name: BuildCounter
    value: $[counter(format('{0:yyyyMMdd}', pipeline.startTime), 1)]
  - name: WindowsPool
    value: "Mare Nubium"
  - name: Container
    value: "ukhydrographicoffice/terraform-azure-powershell-unzip:1.7.2"
  - name: DeploymentPool
    value: "Mare Nectaris"
  - name: DeploymentPoolFT
    value: "Tiberius"
  - name: DeploymentPoolPE
    value: "Private Link Deployments (ENG)"
  - name: DeploymentPoolPD
    value: "Private Link Deployments (BUS)"
  - name: DotNetSdkVersion
    value: "8.x"
  - name: DotNetSdkVersionAddsMock
    value: "9.x"
  - name: snykAbzuOrganizationId
    value: aeb7543b-8394-457c-8334-a31493d8910d

resources:
  repositories:
  - repository: UKHOTemplates
    type: github
    name: UKHO/devops-pipelinetemplates
    endpoint: UKHO
    ref: refs/heads/main
  
  - repository: TriggerAddsAutoTestsPipeline
    type: github
    endpoint: ukho
    name: ukho/devops-trigger-adds-autotest-pipeline
    ref: refs/heads/main 


stages:
- stage: VulnerabilityChecks
  displayName: Snyk checks
  dependsOn: []
  jobs:
  - template: Deployment/Template/vulnerability-checks.yml
    parameters:
      SnykOnlyFailIfFixable: ${{ parameters.SnykOnlyFailIfFixable }}
      SnykPassOnIssues: ${{ parameters.SnykPassOnIssues }}
      
  - stage: RUNSTRKER
    displayName: "run stryker"
    jobs:
      - job: Stryker
        condition: eq('${{ parameters.RunStryker }}', true)      
        workspace:
          clean: all       
        steps:
          - checkout: self
            submodules: true
          - task: UseDotNet@2
            displayName: Use .NET SDK $(DotNetSdkVersionAddsMock)
            inputs:
              packageType: sdk
              version: $(DotNetSdkVersionAddsMock)
          - task: DotNetCoreCLI@2
            displayName: "Install Stryker"
            inputs:
              command: custom
              custom: tool
              arguments: install dotnet-stryker --tool-path $(Agent.BuildDirectory)/tools
          - task: DotNetCoreCLI@2
            displayName: ".Net Core - NuGet restore for non test projects only"
            inputs:
              command: "restore"
              projects: |
                **/*.csproj              
              feedsToUse: config
              noCache: true
              nugetConfigPath: '$(Build.SourcesDirectory)\BuildNuget.config'
              workingDirectory: '$(Build.SourcesDirectory)'             
          - task: Powershell@2
            displayName: "Run Stryker"
            inputs:
              workingDirectory: '$(Build.SourcesDirectory)'
              targetType: 'inline'
              pwsh: true
              script: $(Agent.BuildDirectory)/tools/dotnet-stryker
          - task: PublishMutationReport@0
            displayName: 'Publish Strkyer Mutator Report'
            inputs:
              reportPattern: '**/mutation-report.html'          
  
  - stage: BuildTestPublish
    displayName: "Build (Dotnet Build & Restore , Dotnet Test and Publish Artifact )"
    dependsOn: []
    jobs:
      - template: Deployment/templates/build-test-publish.yml

  - stage: DevDeploy
    dependsOn:
    - VulnerabilityChecks
    - BuildTestPublish
    displayName: "Dev deploy"  
    jobs:
    - template: Deployment/templates/continuous-deployment.yml
      parameters:
        AzureDevOpsEnvironment: "ERP-Dev"
        ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
        AzureSubscription: "ERP-Facade-Dev-A.011.05.12"
        ShortName: "Dev"
        AppPool: $(DeploymentPoolPE)
        Container: ${{variables.Container}}
        DeployADDSMocks: true
        RunFunctionalTests: true 

  - stage: vNextIATDeploy
    dependsOn:
    - DevDeploy
    displayName: "vNextIAT deploy"
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/develop'), startsWith(variables['Build.SourceBranch'], 'refs/heads/dev/')))     
    jobs:
    - template: Deployment/templates/continuous-deployment.yml
      parameters:
        AzureDevOpsEnvironment: "ERP-vNextIAT"
        ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
        AzureSubscription: "ERP-Facade-vNext-IAT-A.011.08"
        ShortName: "vNextIAT"
        AppPool: $(DeploymentPoolPE)
        Container: ${{variables.Container}},
        DeployADDSMocks: true
        RunAddsTests: vNextIAT

  - stage: vNextE2EDeploy
    dependsOn:
    - vNextIATDeploy
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
    displayName: "vNextE2E Deploy" 
    jobs:
    - template: Deployment/templates/continuous-deployment.yml
      parameters:
        AzureDevOpsEnvironment: "ERP-E2E"
        ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
        AzureSubscription: "ERP-Facade-vNext-E2E-A.011.08"
        ShortName: "vnexte2e"
        AppPool: $(DeploymentPoolPE)
        Container: ${{variables.Container}}          
 
  - stage: IATDeploy
    dependsOn:
    - DevDeploy   
    displayName: "IAT deploy"
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')))   
    jobs:
    - template: Deployment/templates/continuous-deployment.yml
      parameters:
        AzureDevOpsEnvironment: "ERP-IAT"
        ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
        AzureSubscription: "ERP-Facade-IAT-A.011.08"
        ShortName: "IAT"
        AppPool: $(DeploymentPoolPE)
        Container: ${{variables.Container}}
        DeployADDSMocks: true
        RunFunctionalTests: true
        RunAddsTests: IAT
  
  - stage: PreProdDeploy
    dependsOn:
    - IATDeploy
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')))
    displayName: "PreProd Deploy"   
    jobs:
    - template: Deployment/templates/continuous-deployment.yml
      parameters:
        AzureDevOpsEnvironment: "ERP-preprod"
        ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
        AzureSubscription: "ERP-Facade-PRE-A.011.08"
        ShortName: "prp"
        AppPool: $(DeploymentPoolPE)
        Container: ${{variables.Container}}
  
  - stage: QADeploy
    dependsOn:
    - DevDeploy
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')))
    displayName: "QA Deploy"  
    jobs:
    - template: Deployment/templates/continuous-deployment.yml
      parameters:
        AzureDevOpsEnvironment: "ERP-QA"
        ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
        AzureSubscription: "ERP-Facade-QA-A.011.05.12"
        ShortName: "qa"
        AppPool: $(DeploymentPoolPE)
        Container: ${{variables.Container}} 
  
  - stage: LiveDeploy
    dependsOn:
    - PreProdDeploy
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')))
    displayName: "Live Deploy"   
    jobs:
    - template: Deployment/templates/continuous-deployment.yml
      parameters:
        AzureDevOpsEnvironment: "ERP-Live"
        ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
        AzureSubscription: "ERP-Facade-Live-A.011.05.12"
        ShortName: "Live"
        AppPool: $(DeploymentPoolPD)
        Container: ${{variables.Container}} 
        RetainPipeline: true 
