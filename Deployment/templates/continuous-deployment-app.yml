parameters:
  # The name of the environment to be used in Azure DevOps.
  - name: AzureDevOpsEnvironment
    type: string
  - name: AzureSubscription
    type: string
  # The name of the Terraform workspace to use. Will also be used to generate job names and, in lower case, used to select the correct var/x-deploy.yml variable file.
  - name: ShortName
    type: string
  # Run functional tests.
  - name: RunFunctionalTests
    type: boolean
    default: false
  - name: ContinueEvenIfResourcesAreGettingDestroyed
    type: boolean
    default: false
  - name: AppPool
    type: string
  - name: Container
    type: string
  - name: RetainPipeline
    type: boolean
    default: false
    

jobs:
- deployment: ${{ parameters.ShortName }}DeployTerraform
  displayName: "${{ upper(parameters.ShortName) }} - deploy terraform"
  environment: ${{ parameters.AzureDevOpsEnvironment }}
  pool: $(DeploymentPool)
  container: ${{ parameters.Container }}
  workspace:
    clean: all
  variables:
  - template: var/${{ lower(parameters.ShortName) }}-deploy.yml
  - template: var/terraform-output-variables.yml
    parameters:
      ShortName: "${{ parameters.ShortName }}" 
  strategy:
    runOnce:
      deploy:
        steps:
        - checkout: self
          clean: true
        - task: PowerShell@2
          displayName: "terraform $(Environment)deploy"
          name: TerraformDeploy
          inputs:
            targetType: filePath
            filePath: '$(Pipeline.Workspace)/terraformartifact/terraform_conditional_run.ps1'
            arguments: '-deploymentResourceGroupName $(DeploymentResourceGroupName) -deploymentStorageAccountName $(DeploymentStorageAccountName) -workSpace $(Environment) -continueEvenIfResourcesAreGettingDestroyed $${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }} -terraformJsonOutputFile $(Pipeline.Workspace)/terraformartifact/terraform_output.json'
          env:
            ARM_CLIENT_ID: $(TERRAFORM-CLIENT-ID)
            ARM_CLIENT_SECRET: $(TERRAFORM-CLIENT-SECRET)
            ARM_TENANT_ID: $(TERRAFORM-TENANT-ID)
            ARM_SUBSCRIPTION_ID: $(TERRAFORM-SUBSCRIPTION-ID)
            TF_VAR_spoke_rg: $(spokeRG)
            TF_VAR_spoke_vnet_name: $(spokeVnetName)
            TF_VAR_spoke_subnet_name: $(spokeSubnetName)
            TF_VAR_subscription_id: $(subscriptionId)
            TF_VAR_hub_subscription_id: $(hubSubscriptionId)
            TF_VAR_pe_vnet_name: $(peVnetName)
            TF_VAR_pe_subnet_name: $(peSubnetName)
            TF_VAR_pe_rg: $(peRG)
            TF_VAR_dns_zone_rg: $(dnsZoneRG)

- deployment: ${{ parameters.ShortName }}DeployApp
  dependsOn:
  - ${{ parameters.ShortName }}DeployTerraform  
  displayName: "${{ upper(parameters.ShortName) }} - Deploy App"
  environment: ${{ parameters.AzureDevOpsEnvironment }}
  pool: 
    name: $(DeploymentPool)
    demands: FM-Perms
  container: ${{ parameters.Container }}
  workspace:
    clean: all
  variables:
  - template: var/${{ lower(parameters.ShortName) }}-deploy.yml
  strategy:
    runOnce:
      deploy:
        steps:
        - checkout: self
          clean: true
        - task: PowerShell@2
          displayName: "Setting KeyVault Secrets as Pipeline Variables "
          inputs:
            targetType: 'inline'
            script: |
                echo "##vso[task.setvariable variable=SapConfiguration.SapPasswordForEncEvent]$(SapPasswordForEncEvent)"
                echo "##vso[task.setvariable variable=SapConfiguration.SapUsernameForEncEvent]$(SapUsernameForEncEvent)"
                echo "##vso[task.setvariable variable=SapConfiguration.SapUsernameForRecordOfSale]$(SapUsernameForRecordOfSale)"
                echo "##vso[task.setvariable variable=SapConfiguration.SapPasswordForRecordOfSale]$(SapPasswordForRecordOfSale)"

        - task: FileTransform@1
          displayName: "File Transform: Mock Service Application Settings"
          condition: and(succeeded(), eq(variables['Environment.Name'], 'ERP-Dev'))
          inputs:
            folderPath: '$(Pipeline.Workspace)/UKHOMockSAPService/*.zip'
            fileType: 'json'
            targetFiles: '**/appsettings.json'

        - task: AzureWebApp@1  
          displayName: "Azure App Deploy: ERPFacade-SAP-MockService"
          condition: and(succeeded(), eq(variables['Environment.Name'], 'ERP-Dev'))
          inputs:
            azureSubscription: "${{ parameters.AzureSubscription }}"
            appType: webApp
            appName: "$(MOCK_WEB_APP_NAME)"
            package: "$(Pipeline.Workspace)/UKHOMockSAPService/UKHO.SAP.MockAPIService.zip"

        - task: FileTransform@1
          displayName: "File Transform: WebAppSettings"
          inputs:
            folderPath: '$(Pipeline.Workspace)/UKHOERPFacadeAPI/*.zip'
            fileType: 'json'
            targetFiles: '**/appsettings.json'
                
        - task: AzureWebApp@1
          displayName: "Azure App Deploy: Staging slot"
          inputs:
            azureSubscription: "${{ parameters.AzureSubscription }}"
            appType: webApp
            appName: "$(WEB_APP_NAME)"
            package: "$(Pipeline.Workspace)/UKHOERPFacadeAPI/UKHOERPFacadeAPI.zip"
            deployToSlotOrASE: true
            slotName: $(WEB_APP_SLOT_NAME) 
        
        - task: AzureAppServiceManage@0
          displayName: Swap with production slot
          inputs:
            azureSubscription: ${{ parameters.AzureSubscription }}
            resourceGroupName: $(ResourceGroup)
            webAppName: "$(WEB_APP_NAME)"
            action: "Swap Slots"
            swapWithProduction: true
            sourceSlot: $(WEB_APP_SLOT_NAME) 
          
        - task: FileTransform@2
          displayName: "File Transform: ADDS Mock Service Application Settings"
          condition: and(succeeded(), eq(variables['Environment.Name'], 'ERP-IAT'))
          inputs:
              folderPath: '$(Pipeline.Workspace)/ADDSMock/*.zip'
              xmlTransformationRules: ''
              jsonTargetFiles: '**/mock-configuration.json'

        - task: AzureWebApp@1
          displayName: "Azure App Deploy: ERPFacade-ADDS-MockService"
          condition: and(succeeded(), eq(variables['Environment.Name'], 'ERP-IAT'))
          inputs:
            azureSubscription: "${{ parameters.AzureSubscription }}"
            appType: webApp
            appName: "$(MOCK_WEB_APP_NAME)"
            package: "$(Pipeline.Workspace)/ADDSMock/UKHOADDSMockService.zip"

- ${{ if eq(parameters.RunFunctionalTests, true) }}:
  - job: ${{ parameters.ShortName }}RetainPipeline
    displayName: ${{ upper(parameters.ShortName) }} - retain pipeline
    dependsOn:
    - ${{ parameters.ShortName }}DeployApp
    steps:
      - template: continuous-testing.yml
        parameters:
          AzureSubscription: "${{ parameters.AzureSubscription }}"

- ${{ if eq(parameters.RetainPipeline, true) }}:
  - job: ${{ parameters.ShortName }}RetainPipeline
    displayName: ${{ upper(parameters.ShortName) }} - retain pipeline
    dependsOn:
    - ${{ parameters.ShortName }}DeployApp
    steps:
      - template: retain-pipeline.yml
