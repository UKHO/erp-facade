parameters:
  - name: AzureSubscription
    type: string

steps:
  - task: PowerShell@2
    displayName: "Setting KeyVault Secrets as Pipeline Variables "
    inputs:
      targetType: 'inline'
      script: |
          echo "##vso[task.setvariable variable=SapConfiguration.SapPasswordForEncEvent]$(SapPasswordForEncEvent)"
          echo "##vso[task.setvariable variable=SapConfiguration.SapUsernameForEncEvent]$(SapUsernameForEncEvent)"
          echo "##vso[task.setvariable variable=SapConfiguration.SapUsernameForRecordOfSale]$(SapUsernameForRecordOfSale)"
          echo "##vso[task.setvariable variable=SapConfiguration.SapPasswordForRecordOfSale]$(SapPasswordForRecordOfSale)"
          
  - task: FileTransform@1
    displayName: "File Transform: Mock Service Application Settings"
    condition: and(succeeded(), eq(variables['Environment.Name'], 'ERP-Dev'))
    inputs:
      folderPath: '$(Pipeline.Workspace)/UKHOMockSAPService/*.zip'
      fileType: 'json'
      targetFiles: '**/appsettings.json'

  - task: AzureWebApp@1
    displayName: "Azure App Deploy: ERPFacade-SAP-MockService"
    condition: and(succeeded(), eq(variables['Environment.Name'], 'ERP-Dev'))
    inputs:
      azureSubscription: "${{ parameters.AzureSubscription }}"
      appType: webApp
      appName: "$(MOCK_WEB_APP_NAME)"
      package: "$(Pipeline.Workspace)/UKHOMockSAPService/UKHO.SAP.MockAPIService.zip"

  - task: FileTransform@1
    displayName: "File Transform: WebAppSettings"
    inputs:
      folderPath: '$(Pipeline.Workspace)/UKHOERPFacadeAPI/*.zip'
      fileType: 'json'
      targetFiles: '**/appsettings.json'

  - task: AzureCLI@2
    displayName: "To get version of azure cli"
    inputs:
      azureSubscription: "ERP-Facade-Dev-A.011.05.12"
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: 'az --version'

  - task: AzureCLI@2
    displayName: "Stop Event Aggregator Webjob"
    inputs:
      azureSubscription: "ERP-Facade-Dev-A.011.05.12"
      scriptType: 'pscore'
      scriptLocation: 'inlineScript'
      inlineScript: 'Get-AzWebAppContinuousWebJob -ResourceGroupName $(ResourceGroup) -AppName $(WEB_APP_NAME) -Name EventAggregationWebJob | Stop-AzWebAppContinuousWebJob'

  - task: AzureWebApp@1
    displayName: "Azure App Deploy: Staging slot"
    inputs:
      azureSubscription: "${{ parameters.AzureSubscription }}"
      appType: webApp
      appName: "$(WEB_APP_NAME)"
      package: "$(Pipeline.Workspace)/UKHOERPFacadeAPI/UKHOERPFacadeAPI.zip"
      deployToSlotOrASE: true
      slotName: $(WEB_APP_SLOT_NAME)

  - task: PowerShell@2
    displayName: "Check the status of staging slot"
    inputs:
      targetType: filePath
      filePath: "$(Pipeline.Workspace)/terraformartifact/check_service_status.ps1"
      arguments: "-healthEndPointUrl https://$(WEB_APP_SLOT_HOST_NAME)/health -waitTimeInMinute $(waitTimeInMinute)"
     
  - task: AzureAppServiceManage@0
    displayName: "Swap with production slot"
    inputs:
      azureSubscription: "${{ parameters.AzureSubscription }}"
      resourceGroupName: $(ResourceGroup)
      webAppName: $(WEB_APP_NAME)
      action: "Swap Slots"
      swapWithProduction: true
      sourceSlot: $(WEB_APP_SLOT_NAME)

  - task: PowerShell@2
    displayName: "Check the status of production slot"
    inputs:
      targetType: filePath
      filePath: "$(Pipeline.Workspace)/terraformartifact/check_service_status.ps1"
      arguments: "-healthEndPointUrl $(ErpFacadeConfiguration.BaseUrl)/health -waitTimeInMinute $(waitTimeInMinute)"
