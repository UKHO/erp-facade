parameters:
  # The name of the environment to be used in Azure DevOps.
  - name: AzureDevOpsEnvironment
    type: string
  - name: AzureSubscription
    type: string
  # The name of the Terraform workspace to use. Will also be used to generate job names and, in lower case, used to select the correct var/x-deploy.yml variable file.
  - name: ShortName
    type: string
  # Run functional tests.
  - name: RunFunctionalTests
    type: boolean
    default: false
  - name: ContinueEvenIfResourcesAreGettingDestroyed
    type: boolean
    default: false
  - name: AppPool
    type: string
  - name: Container
    type: string
  - name: RetainPipeline
    type: boolean
    default: false
  - name: DeploySAPMocks
    type: boolean
    default: false
  - name: DeployADDSMocks
    type: boolean
    default: false
    

jobs:
- deployment: ${{ parameters.ShortName }}DeployTerraform
  displayName: "${{ upper(parameters.ShortName) }} - deploy terraform"
  environment: ${{ parameters.AzureDevOpsEnvironment }}
  pool: $(DeploymentPool)
  container: ${{ parameters.Container }}
  workspace:
    clean: all
  variables:
  - template: var/${{ lower(parameters.ShortName) }}-deploy.yml
  strategy:
    runOnce:
      deploy:
        steps:
        - checkout: self
          clean: true

        - download: current
          displayName: Download terraformartifact
          artifact: terraformartifact

        - template: continuous-deployment.yml
          parameters:
            ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
            AzureSubscription: ${{parameters.AzureSubscription}}       

- deployment: ${{ parameters.ShortName }}DeployApp
  dependsOn:
  - ${{ parameters.ShortName }}DeployTerraform  
  displayName: "${{ upper(parameters.ShortName) }} - Deploy App"
  environment: ${{ parameters.AzureDevOpsEnvironment }}
  pool: ${{ parameters.AppPool }}
  workspace:
    clean: all
  variables:
  - name : WEB_APP_NAME
    value : $[ dependencies.${{ parameters.ShortName }}DeployTerraform.outputs['${{ parameters.ShortName }}DeployTerraform.TerraformDeploy.WEB_APP'] ]
  - name : "ErpFacadeConfiguration.BaseUrl"
    value : $[ dependencies.${{ parameters.ShortName }}DeployTerraform.outputs['${{ parameters.ShortName }}DeployTerraform.TerraformDeploy.ErpFacadeBaseUrl'] ]
  - name : MOCK_WEB_APP_NAME
    value : $[ dependencies.${{ parameters.ShortName }}DeployTerraform.outputs['${{ parameters.ShortName }}DeployTerraform.TerraformDeploy.mockWebApp'] ]
  - name : "KeyVaultSettings.ServiceUri"
    value : $[ dependencies.${{ parameters.ShortName }}DeployTerraform.outputs['${{ parameters.ShortName }}DeployTerraform.TerraformDeploy.keyvaulturi'] ]
  - name :  "AzureWebJobsStorage.ConnectionString"
    value : $[ dependencies.${{ parameters.ShortName }}DeployTerraform.outputs['${{ parameters.ShortName }}DeployTerraform.TerraformDeploy.AzureStorageConnectionString'] ]
  - name : ResourceGroup
    value : $[ dependencies.${{ parameters.ShortName }}DeployTerraform.outputs['${{ parameters.ShortName }}DeployTerraform.TerraformDeploy.ResourceGroup'] ]
  - name : WEB_APP_SLOT_NAME
    value : $[ dependencies.${{ parameters.ShortName }}DeployTerraform.outputs['${{ parameters.ShortName }}DeployTerraform.TerraformDeploy.WEB_APP_SLOT_NAME'] ]
  - name : WEB_APP_SLOT_HOST_NAME
    value : $[ dependencies.${{ parameters.ShortName }}DeployTerraform.outputs['${{ parameters.ShortName }}DeployTerraform.TerraformDeploy.WEB_APP_SLOT_HOST_NAME'] ]
  strategy:
    runOnce:
      deploy:
        steps:
        - checkout: self
          clean: true  

        - download: current
          displayName: Download UKHOERPFacadeAPI
          artifact: UKHOERPFacadeAPI

        - ${{ if eq(parameters.DeploySAPMocks, true) }}:
          - download: current
            displayName: Download UKHOMockSAPService
            artifact: UKHOMockSAPService

        - ${{ if eq(parameters.DeployADDSMocks, true) }}:
          - download: current
            displayName: Download ADDSMock
            artifact: ADDSMock
        
        - task: PowerShell@2
          displayName: "Setting KeyVault Secrets as Pipeline Variables "
          inputs:
            targetType: 'inline'
            script: |
                echo "##vso[task.setvariable variable=SapConfiguration.SapPasswordForEncEvent]$(SapPasswordForEncEvent)"
                echo "##vso[task.setvariable variable=SapConfiguration.SapUsernameForEncEvent]$(SapUsernameForEncEvent)"
                echo "##vso[task.setvariable variable=SapConfiguration.SapUsernameForRecordOfSale]$(SapUsernameForRecordOfSale)"
                echo "##vso[task.setvariable variable=SapConfiguration.SapPasswordForRecordOfSale]$(SapPasswordForRecordOfSale)"
                echo "##vso[task.setvariable variable=ErpFacadeConfiguration.BaseUrl;isOutput=true]$(ErpFacadeConfiguration.BaseUrl)"   
        
        - ${{ if eq(parameters.DeploySAPMocks, true) }}:
          - task: FileTransform@1
            displayName: "File Transform: Mock Service Application Settings"            
            inputs:
              folderPath: '$(Pipeline.Workspace)/UKHOMockSAPService/*.zip'
              fileType: 'json'
              targetFiles: '**/appsettings.json'

          - task: AzureWebApp@1  
            displayName: "Azure App Deploy: ERPFacade-SAP-MockService"          
            inputs:
              azureSubscription: "${{ parameters.AzureSubscription }}"
              appType: webApp
              appName: "$(MOCK_WEB_APP_NAME)"
              package: "$(Pipeline.Workspace)/UKHOMockSAPService/UKHO.SAP.MockAPIService.zip"  

        - ${{ if eq(parameters.DeployADDSMocks, true) }}:  
          - task: FileTransform@2
            displayName: "File Transform: ADDS Mock Service Application Settings"           
            inputs:
                folderPath: '$(Pipeline.Workspace)/ADDSMock/*.zip'
                xmlTransformationRules: ''
                jsonTargetFiles: '**/mock-configuration.json'

          - task: AzureWebApp@1
            displayName: "Azure App Deploy: ERPFacade-ADDS-MockService"            
            inputs:
              azureSubscription: "${{ parameters.AzureSubscription }}"
              appType: webApp
              appName: "$(MOCK_WEB_APP_NAME)"
              package: "$(Pipeline.Workspace)/ADDSMock/UKHOADDSMockService.zip"

        - task: FileTransform@1
          displayName: "File Transform: WebAppSettings"
          inputs:
            folderPath: '$(Pipeline.Workspace)/UKHOERPFacadeAPI/*.zip'
            fileType: 'json'
            targetFiles: '**/appsettings.json'
                
        - task: AzureWebApp@1
          displayName: "Azure App Deploy: Staging slot"
          inputs:
            azureSubscription: "${{ parameters.AzureSubscription }}"
            appType: webApp
            appName: "$(WEB_APP_NAME)"
            package: "$(Pipeline.Workspace)/UKHOERPFacadeAPI/UKHOERPFacadeAPI.zip"
            deployToSlotOrASE: true
            slotName: $(WEB_APP_SLOT_NAME) 
        
        - task: AzureAppServiceManage@0
          displayName: Swap with production slot
          inputs:
            azureSubscription: "${{ parameters.AzureSubscription }}"
            resourceGroupName: $(ResourceGroup)
            webAppName: "$(WEB_APP_NAME)"
            action: "Swap Slots"
            swapWithProduction: true
            sourceSlot: $(WEB_APP_SLOT_NAME)        

- ${{ if eq(parameters.RunFunctionalTests, true) }}:
  - job: ${{ parameters.ShortName }}FunctionalTest
    displayName: ${{ upper(parameters.ShortName) }} - Functional Test
    dependsOn:
    - ${{ parameters.ShortName }}DeployApp            
    variables:
    - template: var/${{ lower(parameters.ShortName) }}-deploy.yml    
    
    - name : ErpFacadeConfiguration.BaseUrl
      value : $[ dependencies.${{ parameters.ShortName }}DeployTerraform.outputs['${{ parameters.ShortName }}DeployTerraform.tfoutput.ErpFacadeBaseUrl'] ]
    - name : SapMockConfiguration.BaseUrl
      value : $[ dependencies.${{ parameters.ShortName }}DeployTerraform.outputs['${{ parameters.ShortName }}DeployTerraform.tfoutput.mockwebappurl'] ]
    - name : AzureStorageConfiguration.ConnectionString
      value : $[ dependencies.${{ parameters.ShortName }}DeployTerraform.outputs['${{ parameters.ShortName }}DeployTerraform.tfoutput.AzureStorageConnectionString'] ]
    - name : mockWebAppName
      value : $[ dependencies.${{ parameters.ShortName }}DeployTerraform.outputs['${{ parameters.ShortName }}DeployTerraform.tfoutput.mockWebApp'] ]
    - name : mockWebAppResourceGroup
      value : $[ dependencies.${{ parameters.ShortName }}DeployTerraform.outputs['${{ parameters.ShortName }}DeployTerraform.tfoutput.mockWebAppResourceGroupName'] ]
 
    workspace:
      clean: all
    steps:
      - template: continuous-testing.yml
        parameters:              
          AzureSubscription: "${{ parameters.AzureSubscription }}"

- ${{ if eq(parameters.RetainPipeline, true) }}:
          - job: ${{ parameters.ShortName }}RetainPipeline
            displayName: ${{ upper(parameters.ShortName) }} - retain pipeline
            dependsOn:
            - ${{ parameters.ShortName }}DeployApp
            steps:
            - checkout: UKHOTemplates
            - template: retain-pipelinerun/retain-pipelinerun.yml@UKHOTemplates
              parameters:
                DaysValid: 365
